// Generated by CoffeeScript 1.6.1
(function() {
  var canvas, config, ctx, fps, gui, height, i, lastUpdate, particles, random, render, run, setPixel, width, _i;

  canvas = document.createElement('canvas');

  ctx = canvas.getContext("2d");

  width = canvas.width = document.width;

  height = canvas.height = document.height;

  document.body.appendChild(canvas);

  random = function(min, max) {
    if (max == null) {
      max = 0;
    }
    return Math.floor(Math.random() * (max + 1 - min)) + min;
  };

  config = {
    fov: 250,
    background: 'rgba(0,0,0,0.1)',
    color: [80, 140, 255],
    axis: 'z',
    step: 1
  };

  gui = new dat.GUI();

  gui.add(config, 'fov');

  gui.add(config, 'step', 0, 10);

  gui.addColor(config, 'background');

  gui.addColor(config, 'color');

  gui.add(config, 'axis', ['x', 'y', 'z']);

  particles = [];

  for (i = _i = 0; _i <= 50000; i = ++_i) {
    particles.push({
      x: random(-400, 400),
      y: random(-400, 400),
      z: random(-400, 400)
    });
  }

  setPixel = function(imageData, x, y) {
    x += width / 2;
    y += height / 2;
    if (x < 0 || x > width || y < 0 || y > height) {
      return;
    }
    i = (((y >> 0) * width) + (x >> 0)) * 4;
    imageData.data[i] += config.color[0];
    imageData.data[i + 1] += config.color[1];
    return imageData.data[i + 2] += config.color[2];
  };

  render = function(dt) {
    var imageData, p, scale, _j, _len;
    ctx.fillStyle = config.background;
    ctx.fillRect(0, 0, width, height);
    imageData = ctx.getImageData(0, 0, width, height);
    for (_j = 0, _len = particles.length; _j < _len; _j++) {
      p = particles[_j];
      scale = config.fov / (config.fov + p.z);
      setPixel(imageData, p.x * scale, p.y * scale);
      p[config.axis] -= config.step;
      if (p[config.axis] < -config.fov) {
        p[config.axis] += config.fov * 2;
      }
    }
    return ctx.putImageData(imageData, 0, 0);
  };

  lastUpdate = Date.now();

  fps = 60;

  run = function() {
    var dt, now;
    now = Date.now();
    dt = now - lastUpdate;
    if (dt >= (1000 / fps)) {
      lastUpdate = now - dt % (1000 / fps);
      render(dt);
    }
    return requestAnimationFrame(run);
  };

  run();

}).call(this);
